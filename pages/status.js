// This script controls the status page for the Fanuc UI

const fetch = require('node-fetch')
const { stat } = require('fs')
const { connected } = require('process')
let intervalId, resultTable

function load_status() {
  fadeIn()
  const text = /*html*/ ` 
    <div class="container">
        <div class="col align-items-center d-flex flex-column">
          <div class="row-3 main-row">
            <h1>Performing Measurements...</h1>
            <h3 id="state">Ready</h3>
          </div><br>
     
          <div class="status-field" id="status-field">

            <table class="table" id="status-table">
              <thead>
                <tr>
                  <th scope="col">Device Number</th>
                  <th scope="col">Time</th> 
                  <th scope="col">Resistance</th>   
                  <th scope="col">Result</th>
                </tr>
              </thead>
              <tbody id="status-table-body">

              </tbody>
            </table>    
          </div>
          <button class="btn btn-danger" id="abort"> Abort </button>
        </div>
    </div>
    <script src="./pages/testpoint.js"></script>
      `
  document.getElementById('body').innerHTML = text

  // Call abortjob method when abort btn clicked
  var abortButton = document.getElementById('abort')
  abortButton.addEventListener('click', function () {
    console.log('Abort button clicked.')
    abortJob()
  })

  intervalId = setInterval(getState, 3000) // Calls getState every 3 seconds
}

// Makes call to API's getstate method.
// Sends results of that call to handleGetState
function getState() {
  var getStateURL = SERVICE_URL + 'getstate'
  console.log('getStateURL: ', getStateURL)
  fetch(getStateURL).then((res) =>
    res.json().then((message) => handleGetState(message)),
  )
}

// Handles result of a call to the API's getstate method.
function handleGetState(body) {
  // Check if job is completed
  if (body.state == 'completed') {
    statusCompleted()
  }

  // Update the page
  updateHeader(body)
  updateStatus(body.data)
}

// Updates the state header with the state
// Argument 'body' is the JSON which is returned by the fanuc service
function updateHeader(body) {
  document.getElementById('state').innerText = body.state
  return
}

// Clears the status table and updates it with the new entries
// Argument "data" is an Object which contains the array of Entries to be displayed
function updateStatus(data) {
  // Delete old rows
  document.getElementById('status-table-body').innerHTML = ''

  // Add all entries to the table body
  var entryValues = Object.values(data) // Create an array of the values
  for (var i = 1; i < entryValues.length; i++) {
    console.log('addEntry: ', entryValues[i])

    // Remove quotations
    //entryValues[i].test_time = entryValues.test_time[i].replace(/"/g, '')

    addEntry(entryValues[i])
  }
}

// Updates the status field with an entry
// Argument "entry" is a dictionary item with keys: device_num, test_time, res_meas, test_result
function addEntry(entry) {
  var table = document.getElementById('status-table-body')
  var row = table.insertRow(-1) // insert a row at the end of the table
  var dnCell = row.insertCell(0) //device number cell
  dnCell.innerHTML = JSON.stringify(entry.device_num)
  var tiCell = row.insertCell(1) //time cell
  tiCell.innerHTML = JSON.stringify(entry.test_time).replace(/"/g, '')
  var reCell = row.insertCell(2) //resistance cell
  reCell.innerHTML = JSON.stringify(entry.res_meas)
  var rtCell = row.insertCell(3) //result cell
  rtCell.innerHTML = JSON.stringify(entry.test_result).replace(/"/g, '')
}

// Calls the abortJob method of the API
// Uses code generated by postman
function abortJob() {
  var requestOptions = {
    method: 'GET',
    redirect: 'follow',
  }

  fetch(SERVICE_URL + 'abortjob', requestOptions)
    .then((response) => response.text())
    .then((result) => console.log(result))
    .catch((error) => console.log('error', error))
}

// Saves the table, fetches resetresults, and loads the next page
function statusCompleted() {
  console.log('Status: Complete.')
  // Save the table
  resultTable = document.getElementById('status-table')
  // Call the resetresults method in the API
  fetch(SERVICE_URL + 'resetresults') //"add code for bad response?"
    .then((res) => console.log('res.text:', res.text))
  clearInterval(intervalId) // Clear the interval to stop calling getstatus
  fadeOut(load_summary) // Load the next page
}
